import java.lang.Number
import java.util.Random
import org.openhab.core.library.types.*
import org.openhab.model.script.actions.*
import org.openhab.core.items.*
import org.openhab.core.items.GenericItem
import org.eclipse.smarthome.core.persistence.*
import org.eclipse.smarthome.core.persistence.HistoricItem
import java.lang.String
import java.util.ArrayList
import java.util.List 
import java.lang.Integer
import java.util.Set
import java.util.Map
import java.util.HashMap

var Timer timer = null
var Timer serverTimer = null
val Random random = new Random()
val Map<String, Integer> mapDimmerState = new HashMap<String, Integer>()

rule "Init LED dimmer state"
	when
		System started
	then

    for(item:gLED.members)
    {
        logInfo("Execute Contact:item.name",item.name)
        mapDimmerState.put(item.name, 0)
    }

end



rule "Light_FF_Bed_Ceiling State"
        when
                Item Light_FF_Bed_Ceiling received update
        then
                if (Light_FF_Bed_Ceiling.state == ON) {

                        var State = OutputsState.state as DecimalType
                        var Pos   = State.toBigDecimal.toBigInteger.intValue.bitwiseOr(2)
                        postUpdate(OutputsState,Pos)

                } else {
                         var State = OutputsState.state as DecimalType
                         var Pos   = State.toBigDecimal.toBigInteger.intValue.bitwiseAnd(-3)
                          postUpdate(OutputsState,Pos)
                }

end
/*
rule "Light_FF_Child_Ceiling State"
        when
                Item Light_FF_Child_Ceiling received update
        then
                if (Light_FF_Child_Ceiling.state == ON) {

                        var State = OutputsState.state as DecimalType
                        var Pos   = State.toBigDecimal.toBigInteger.intValue.bitwiseOr(1)
                        postUpdate(OutputsState,Pos)

                } else {
                         var State = OutputsState.state as DecimalType
                         var Pos   = State.toBigDecimal.toBigInteger.intValue.bitwiseAnd(-2)
                          postUpdate(OutputsState,Pos)
                         }

end
		
rule "Contact_0_1"
        when
                Item Contact_0_1 received update
        then
                if(Contact_0_1.state == "LPress")
                        sendCommand(Lights, OFF)
		if(Contact_0_1.state == "Click")
                        sendCommand(Light_FF_Child_Ceiling, OFF)
		if(Contact_0_1.state == "DblClick")
                        sendCommand(Lights, OFF)
end


rule "Light_FF_Office_Ceiling State"
        when
                Item Light_FF_Office_Ceiling received update
        then
                if (Light_FF_Office_Ceiling.state == ON) {
                    var State = OutputsState.state as DecimalType
                    var Pos   = State.toBigDecimal.toBigInteger.intValue.bitwiseOr(4)
                    postUpdate(OutputsState,Pos)

                } else 
                {
                    var State = OutputsState.state as DecimalType
                    var Pos   = State.toBigDecimal.toBigInteger.intValue.bitwiseAnd(-5)
                    postUpdate(OutputsState,Pos)
                }

end
*/

rule "Contact_0_1"
        when
            Item Shutter_Bed received command
        then
            
            if(receivedCommand == UP){
                logInfo("SHUTTER_UP",Shutter_Bed.state.toString())
                sendCommand(Shutter_Bed_Up,ON)
                createTimer(now.plusMillis(300)) [| sendCommand(Shutter_Bed_Up, OFF) ]
            }
		    else if(receivedCommand == DOWN){
                logInfo("SHUTTER_DOWN",Shutter_Bed.state.toString())
                sendCommand(Shutter_Bed_Down,ON)
                createTimer(now.plusMillis(300)) [| sendCommand(Shutter_Bed_Down, OFF) ]
            }
		    else if(receivedCommand == STOP){
                logInfo("SHUTTER_STOP",Shutter_Bed.state.toString())
                sendCommand(Shutter_Bed_Stop,ON)
                createTimer(now.plusMillis(300)) [| sendCommand(Shutter_Bed_Stop, OFF) ]
            }
end


rule "Execute Contact"
    when
        Item CommandString received update
    then

        logInfo("RULE_EXEC_CONTACT", CommandString.state.toString)
        var List<String> sArray = CommandString.state.toString.split(":")
        
        var slectedItem = gVirtContact.members.filter(mem | mem.name == sArray.get(0)).head as GenericItem
        if(slectedItem == null)
        {
            logWarn("RULE_EXEC_CONTACT", "No item " + sArray.get(0))
            return false
        }
        
        var cmdTag = slectedItem.tags.filter(tg | tg.contains(sArray.get(1))).head as String
        if (cmdTag == null || cmdTag.isEmpty())
        {
            logWarn("RULE_EXEC_CONTACT", "No tag " + sArray.get(1))
            return false
        }
        
        var List<String> tagArray = cmdTag.split(":")
        if(tagArray.length < 3)
        {
            logWarn("RULE_EXEC_CONTACT", "Configuration error " + cmdTag)
            return false
        }

        logInfo("RULE_EXEC_CONTACT", "Tag " + cmdTag)
        var String sCmdType = tagArray.get(2)

        // сначала ищем item среди выключателей освещения (цифровые выходы)
        var itSW = gDO.members.filter(mem | mem.name == tagArray.get(1)).head as GenericItem
        if (itSW != null)
        {
            if(sCmdType.contains("Toggle"))
            {
                if (itSW.state == ON)
                    itSW.sendCommand(OFF)
                else
                    itSW.sendCommand(ON)
            }
            else if (sCmdType.contains("OFF"))
                itSW.sendCommand(OFF)
            else if (sCmdType.contains("ON"))
                itSW.sendCommand(ON)
            else if (sCmdType.contains("DOWN"))
                itSW.sendCommand(DOWN)
            else if (sCmdType.contains("UP"))
                itSW.sendCommand(UP)
            else if (sCmdType.contains("STOP"))
                itSW.sendCommand(STOP)
            else
                logWarn("RULE_EXEC_CONTACT", "Config error " + sCmdType)

            return true
        } 

        var itDimm = gAO.members.filter(mem | mem.name == tagArray.get(1)).head as GenericItem
        if (itDimm != null)
        {
            var currentBright = 0
            if(itDimm.state instanceof PercentType)
            {
                var currentState = itDimm.state as PercentType
                currentBright = currentState.intValue
            }

            var prevVal = mapDimmerState.get(itDimm.name)
            if(prevVal == null)
            {
                logWarn("RULE_EXEC_CONTACT", "Prev value is undef")
            //         prevVal = PercentType.ZERO.intValue
            }
            mapDimmerState.replace(itDimm.name, currentBright)

            if (sCmdType.contains("CHANGE_BRIGHT"))
            {
                logInfo("RULE_EXEC_CONTACT", "Change bright command executing")

                if(currentBright ==100)
                    currentBright = 75
                else if (currentBright == 0)
                    currentBright = 25
                else if (currentBright >prevVal) 
                {
                    currentBright = currentBright + 25
                    if (currentBright > 100)
                        currentBright = 100
                }
                else 
                {
                    currentBright = currentBright - 25
                    if(currentBright < 0)
                        currentBright = 0
                }
                itDimm.sendCommand(currentBright) 
            }
            else if (sCmdType.contains("Toggle"))
            {
                logInfo("RULE_EXEC_CONTACT", "Toggle command executing")

                if (currentBright > 0)
                    currentBright = 0
                else
                {
                    if (prevVal == 0)
                        currentBright = 25
                    else
                        currentBright = prevVal
                }
                itDimm.sendCommand(currentBright)
            }
        }
end

// rule "Termostat Balkon1"
//         when 
//                 Item Temp_Balkon_SetPoint received update or
//                 Item Temp_Balkon received update or
//                 Item Temp_Balkon_Mode received update
//         then

//                 if((Temp_Balkon_Mode.state as DecimalType).intValue == 2)
//                 {

//                     var TempSP = (Temp_Balkon_SetPoint.state as DecimalType).floatValue
//                     var TempLoft = (Temp_Balkon.state as DecimalType).toBigDecimal.floatValue


//                     if ( (TempSP - TempLoft)>0.2) {
//                             sendCommand(TPol_Office, ON)
//                     }
//                     else if ( (TempLoft-TempSP)>0.2) {
//                             sendCommand(TPol_Office, OFF)
//                     }
//                 }
// end

rule "Termostat Balkone change mode"
when
    Item Temp_Balkon_Mode received update
then
    if((Temp_Balkon_Mode.state as DecimalType).intValue == 0  ) {
        sendCommand(TPol_Office, OFF)   
    } 
    else if((Temp_Balkon_Mode.state as DecimalType).intValue == 1  ) {
        sendCommand(TPol_Office, ON)   
    } 
    
    
end

// rule "RGB Set random color1"
// 	when
// 		Time cron "0/1 * * * * ?"
// 	then
//         if(Light_Bath_Color.state == ON) {
//             sendCommand(Light_Bath_RGB_Red, (Math::random * 100).intValue )
//             sendCommand(Light_Bath_RGB_Green, (Math::random * 100).intValue )
//             sendCommand(Light_Bath_RGB_Blue, (Math::random * 100).intValue )
//         }
// end

// rule "Bath Color1"
// when
//     Item Light_Bath_Color received update
// then
//     if(Light_Bath_Color.state == OFF  ) {
//         sendCommand(Light_Bath_RGB_Red, OFF)
//         sendCommand(Light_Bath_RGB_Green, OFF)
//         sendCommand(Light_Bath_RGB_Blue, OFF)
        
//     } 
       
// end

rule "Toilet Cooler"
when
    Item gToiletLights changed from ON to OFF
then
    sendCommand(Light_Toilet_Cooler, ON)
    // create a timer to turn the cooler off
    timer = createTimer(now.plusSeconds(300)) [|
        sendCommand(Light_Toilet_Cooler, OFF)
    ]
end




rule "React on Sensor_Servernaya change/update"
when
    Item Sensor_Servernaya changed to CLOSED
then
    logInfo("RULE_EXEC_SENSOR", "changed to CLOSED")

    if(serverTimer == null || serverTimer.hasTerminated) 
    {
        if(Light_Servernaya_Ceiling.state == OFF)
        {
            logInfo("RULE_EXEC_SENSOR", "Light is OFF, timer is inactive")
            Light_Servernaya_Ceiling.sendCommand(ON)

            serverTimer = createTimer(now.plusSeconds(30), [| 
                Light_Servernaya_Ceiling.sendCommand(OFF)
                serverTimer = null
            ])
        }
        else
            logInfo("RULE_EXEC_SENSOR", "Light is ON")
    }
    else 
    {
        logInfo("RULE_EXEC_SENSOR", "timer is active")
        serverTimer.reschedule(now.plusSeconds(30))
    }

end

/*
rule "Bath Cooler"
when
    Item gBathLights changed from ON to OFF
then
    sendCommand(Light_Bath_Cooler,ON)
    // create a timer to turn the cooler off
    timer = createTimer(now.plusSeconds(30)) [|
        sendCommand(Light_Bath_Cooler, OFF)
    ]
end
*/

import java.util.Random
import org.eclipse.smarthome.core.library.types.*
import org.openhab.core.library.types.*
import org.openhab.model.script.actions.*
import org.openhab.core.items.*
import org.eclipse.smarthome.core.persistence.*
import java.lang.String
import java.util.List 
import java.lang.Integer
import java.util.Map
import java.util.HashMap
import java.util.concurrent.locks.ReentrantLock

val ReentrantLock stompingLock = new ReentrantLock

var Timer timer = null
val Random random = new Random()

val Map<String, Integer> mapDimmerState = new HashMap<String, Integer>()

var Timer mdTimerServernaya = null
var Timer mdTimerBathCooler = null

rule "Init LED dimmer state"
	when
		System started
	then

    for(item:gLED.members)
    {
        logInfo("Execute Contact:item.name",item.name)
        mapDimmerState.put(item.name, 0)
    }

    Temp_Balkon_Mode.sendCommand(0)
end


rule "Execute Contact"
    when
        Item CommandString received update
    then
        var String sCommand
        try {
            stompingLock.lock()
            sCommand = new String(CommandString.state.toString)	
        }
        catch(Throwable t){}
        finally{
            stompingLock.unlock()
        }
        
        //logInfo("RULE_EXEC_CONTACT", sCommand)

        var List<String> sArray = sCommand.split(":")
        var filter0 = sArray.get(0);
        var slectedItem = gVirtContact.members.filter(mem | mem.name == filter0).head as GenericItem
        if(slectedItem === null)
        {
            //logWarn("RULE_EXEC_CONTACT", "No item " + sArray.get(0))
            return
        }

        var filter1 = sArray.get(1);
        var cmdTag = slectedItem.tags.filter(tg | tg.contains(filter1)).head
        if (cmdTag === null || cmdTag.isEmpty())
        {
            //logWarn("RULE_EXEC_CONTACT", "No tag " + sArray.get(1))
            return
        }

        var List<String> tagArray = cmdTag.split(":")
        if(tagArray.length < 3)
        {
            //logWarn("RULE_EXEC_CONTACT", "Configuration error " + cmdTag)
            return
        }

        //logInfo("RULE_EXEC_CONTACT", "Tag " + cmdTag)

        var String sCmdType = tagArray.get(2)

        // сначала ищем item среди выключателей освещения (цифровые выходы)
        val itSW = gDO.members.filter(mem | mem.name == tagArray.get(1)).head as GenericItem
        if (itSW !== null)
        {
            if(sCmdType.contains("Toggle"))
            {
                if (itSW.state == ON)
                    itSW.sendCommand(OFF)
                else
                    itSW.sendCommand(ON)
            }
            else if (sCmdType.contains("OFF"))
                sendCommand(itSW, OFF)
            else if (sCmdType.contains("ON"))
                itSW.sendCommand(ON)
            else if (sCmdType.contains("DOWN"))
                itSW.sendCommand(DOWN)
            else if (sCmdType.contains("UP"))
                itSW.sendCommand(UP)
            else if (sCmdType.contains("STOP"))
                itSW.sendCommand(STOP)
            else
                logWarn("RULE_EXEC_CONTACT", "Config error " + sCmdType)

            return
        } 

        val itDimm = gAO.members.filter(mem | mem.name == tagArray.get(1)).head as GenericItem
        if (itDimm !== null)
        {
            var currentBright = 0
            if(itDimm.state instanceof PercentType)
            {
                var currentState = itDimm.state as PercentType
                currentBright = currentState.intValue
            }

            var prevVal = mapDimmerState.get(itDimm.name)
            if(prevVal == null)
            {
                logWarn("RULE_EXEC_CONTACT", "Prev value is undef")
            //         prevVal = PercentType.ZERO.intValue
            }

            mapDimmerState.replace(itDimm.name, currentBright)

            if (sCmdType.contains("CHANGE_BRIGHT"))
            {
                //logInfo("RULE_EXEC_CONTACT", "Change bright command executing")
                if(currentBright == 100)
                    currentBright = 75
                else if (currentBright == 0)
                    currentBright = 100
                else if (currentBright > prevVal) 
                {
                    currentBright = currentBright + 25
                    if (currentBright > 100)
                        currentBright = 100
                }
                else 
                {
                    currentBright = currentBright - 25
                    if(currentBright < 0)
                        currentBright = 0
                }

                itDimm.sendCommand(currentBright) 
            }

            else if (sCmdType.contains("Toggle"))
            {
                //logInfo("RULE_EXEC_CONTACT", "Toggle command executing")

                if (currentBright > 0)
                    currentBright = 0
                else
                {
                    if (prevVal == 0)
                        currentBright = 25
                    else
                        currentBright = prevVal
                }

                itDimm.sendCommand(currentBright)
            }
        }
end


rule "Termostat Balkon"
        when 
                Item Temp_Balkon_SetPoint received update or
                Item Temp_Balkon received update or
                Item Temp_Balkon_Mode received update
        then

                if((Temp_Balkon_Mode.state as DecimalType).intValue == 2)
                {

                    var TempSP = (Temp_Balkon_SetPoint.state as DecimalType).floatValue
                    var TempLoft = (Temp_Balkon.state as DecimalType).toBigDecimal.floatValue


                    if ( (TempSP - TempLoft)>0.2) {
                            sendCommand(TPol_Office, ON)
                    }
                    else if ( (TempLoft-TempSP)>0.2) {
                            sendCommand(TPol_Office, OFF)
                    }
                }
end


rule "Termostat Balkone change mode"
when
    Item Temp_Balkon_Mode received update
then
    if((Temp_Balkon_Mode.state as DecimalType).intValue == 0  ) {
        sendCommand(TPol_Office, OFF)   
    } 
    else if((Temp_Balkon_Mode.state as DecimalType).intValue == 1  ) {
        sendCommand(TPol_Office, ON)   
    } 
end


rule "RGB Set random color"
	when
		Time cron "0/3 * * * * ?"
	then
        if(Light_Bath_Color.state == ON) {
            sendCommand(Light_Bath_RGB_Red, (Math::random * 100).intValue )
            sendCommand(Light_Bath_RGB_Green, (Math::random * 100).intValue )
            sendCommand(Light_Bath_RGB_Blue, (Math::random * 100).intValue )
        }
end


rule "Bath Color"
when
    Item Light_Bath_Color received update
then
    if(Light_Bath_Color.state == OFF  ) {
        sendCommand(Light_Bath_RGB_Red, 0)
        sendCommand(Light_Bath_RGB_Green, 0)
        sendCommand(Light_Bath_RGB_Blue, 0)
    } 
end


rule "Bath Cooler OFF"
when
    Item gBathLights changed from ON to OFF
then
//    sendCommand(Light_Bath_Cooler,ON)
    mdTimerBathCooler.cancel()
    // create a timer to turn the cooler off
    timer = createTimer(now.plusSeconds(600)) [|
        sendCommand(Light_Bath_Cooler, OFF)
    ]
end


rule "Bath Cooler ON"
when
    Item gBathLights changed from OFF to ON
then
    // create a timer to turn the cooler on in 10 minutes
    mdTimerBathCooler = createTimer(now.plusMinutes(10)) [|
        sendCommand(Light_Bath_Cooler, ON)
    ]
end


rule "Sensor Servernaya"
when
	Item Sensor_Servernaya received update
then
//	 logInfo("MOTION SENSOR","CLOSE")	
	
	if(Sensor_Servernaya.state == CLOSED)
	{
		 Light_Servernaya_Ceiling.sendCommand(ON)
	}
	else
	{
		if (mdTimerServernaya === null) {
			mdTimerServernaya  = createTimer(now.plusMinutes(1), [|
			Light_Servernaya_Ceiling.sendCommand(OFF)
			mdTimerServernaya  = null
			])
		}
		else{
	 		mdTimerServernaya.reschedule(now.plusMinutes(1))
		}
	}

end





rule "Shutter Livingroom"
    when
        Item Shutter_Living received command
    then
        if(receivedCommand == UP){
            sendCommand(Shutter_Living_Up,ON)
            createTimer(now.plusMillis(300)) [| sendCommand(Shutter_Living_Up, OFF) ]
        }
		else if(receivedCommand == DOWN){
            sendCommand(Shutter_Living_Down,ON)
            createTimer(now.plusMillis(300)) [| sendCommand(Shutter_Living_Down, OFF) ]
        }
		else if(receivedCommand == STOP){
            sendCommand(Shutter_Living_Stop,ON)
            createTimer(now.plusMillis(300)) [| sendCommand(Shutter_Living_Stop, OFF) ]
        }
end

rule "Open curtain in Livingroom at 7-30 AM"
    when
        Time cron "0 30 7 * * ?"
    then
        Shutter_Living.sendCommand(UP)
end

rule "Close living curtain in the Evening"
when
	Item gLivingLights changed from OFF to ON
then
	if(Shutter_Living.state != 100){
		if(now.isAfter((DayLigtEnd_Time.state as DateTimeType).calendar.timeInMillis)){
			Shutter_Living.sendCommand(DOWN)
		}
	}
end